// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/elct9620/gopherday2024/internal/app"
	"github.com/elct9620/gopherday2024/internal/app/rest"
	"github.com/elct9620/gopherday2024/internal/app/rest/v1"
	"github.com/elct9620/gopherday2024/internal/app/rest/v2"
	"github.com/elct9620/gopherday2024/internal/app/rest/v3"
	"github.com/elct9620/gopherday2024/internal/repository"
	"github.com/elct9620/gopherday2024/internal/usecase"
	"github.com/go-chi/chi/v5"
)

// Injectors from wire.go:

func InitializeTest() (*chi.Mux, error) {
	inMemoryEventRepository := repository.NewInMemoryEventRepository()
	eventQuery := usecase.NewEventQuery(inMemoryEventRepository)
	createEventCommand := usecase.NewCreateEventCommand(inMemoryEventRepository)
	v := v1.ProvideRotues(eventQuery, createEventCommand)
	router := v1.New(v...)
	v4 := v2.ProvideRotues(eventQuery)
	v2Router := v2.New(v4...)
	inMemoryShipmentRepository := repository.NewInMemoryShipmentRepository()
	shipmentQuery := usecase.NewShipmentQuery(inMemoryShipmentRepository)
	createShipmentCommand := usecase.NewCreateShipmentCommand(inMemoryShipmentRepository)
	createShipmentItemCommand := usecase.NewCreateShipmentItemCommand(inMemoryShipmentRepository)
	changeShipmentStateCommand := usecase.NewChangeShipmentStateCommand(inMemoryShipmentRepository)
	v5 := v3.ProvideRotues(shipmentQuery, createShipmentCommand, createShipmentItemCommand, changeShipmentStateCommand)
	v3Router := v3.New(v5...)
	v6 := app.ProvideRestRouters(router, v2Router, v3Router)
	t, err := rest.NewOpenApi()
	if err != nil {
		return nil, err
	}
	routersRouter, err := rest.NewOpenApiRouter(t)
	if err != nil {
		return nil, err
	}
	openApiMiddleware := rest.ProvideOpenApiMiddleware(routersRouter)
	mux := rest.NewTest(v6, openApiMiddleware)
	return mux, nil
}
