openapi: 3.0.3
info:
  title: GopherDay 2024 - Demo
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Local Development
    url: http://localhost:{port}
    variables:
      port:
        default: '8080'
  - description: Go Test
    url: http://example.com
tags:
  - name: Events V1
  - name: Events V2
  - name: probe
paths:
  /livez:
    get:
      tags:
        - probe
      summary: Check server is alive
      operationId: getLivez
      responses:
        '200':
          description: Server is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liveness'
  /v1/events:
    get:
      tags:
        - Events V1
      summary: Get events
      operationId: getEventsV1
      responses:
        '200':
          description: return events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventV1'
    post:
      tags:
        - Events V1
      summary: Create an event
      operationId: postEventsV1
      responses:
        '200':
          description: an new event is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventV1'
  /v2/events:
    get:
      tags:
        - Events V2
      summary: Get events
      operationId: getEventsV2
      responses:
        '200':
          description: return events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventV2'
  /v3/shipments:
    post:
      tags:
        - Shipments
      summary: Create a shipment
      operationId: postShipmentsV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - id
              properties:
                id:
                  type: string
                  example: f4eb8e5f-7272-4c5e-a8eb-735969bdd288
      responses:
        '200':
          description: create a shipment success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentV3'
  /v3/shipments/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          example: a449b857-5e97-4bee-8ffe-1b544fa4ec5b
    get:
      tags:
        - Shipments
      summary: Get shipment
      operationId: getShipmentV3
      responses:
        '200':
          description: return a shipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentV3'
    put:
      tags:
        - Shipments
      summary: Update shipment state
      operationId: putShipmentV3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - state
              properties:
                state:
                  type: string
                  example: shipping
                  enum:
                    - shipping
                    - delivered
      responses:
        '200':
          description: update shipment success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentV3'

  /v3/shipments/{id}/items:
    post:
      tags:
        - Shipments
      summary: Add shipment itme
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            example: a449b857-5e97-4bee-8ffe-1b544fa4ec5b
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - name
              properties:
                name:
                  type: string
                  example: Macbook Max M3 14inch
      responses:
        '200':
          description: return a shipment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShipmentV3'
components:
  schemas:
    Liveness:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          example: ok
    EventV1:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          example: 5aa8e465-a673-42c8-9bd7-c3d62bd6bfde
    EventV2:
      required:
        - id
        - created_at
      type: object
      properties:
        id:
          type: string
          example: 5aa8e465-a673-42c8-9bd7-c3d62bd6bfde
        created_at:
          type: string
          example: 2024-02-24T15:47:47.206913+08:00
    ShipmentV3:
      required:
        - id
        - state
        - items
        - updated_at
      type: object
      properties:
        id:
          type: string
          example: a449b857-5e97-4bee-8ffe-1b544fa4ec5b
        state:
          type: string
          enum:
            - unknown
            - pending
            - shipping
            - delivered
          example: pending
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShipmentItemV3'
        updated_at:
          type: string
          nullable: true
          example: 2024-02-24T15:47:47.206913+08:00
    ShipmentItemV3:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          example: 09725879-e294-44e7-b296-43f3f5e57c53
        name:
          type: string
          example: Macbook Max M3 14inch
  requestBodies:
